# vi: fdm=marker

# set shell options {{{
eval "$(dircolors $ZDOTDIR/dircolors)"

setopt AUTO_CD AUTO_PUSHD CDABLE_VARS PUSHD_IGNORE_DUPS PUSHD_TO_HOME  \
  PUSHD_SILENT ALWAYS_TO_END AUTO_NAME_DIRS COMPLETE_IN_WORD COMPLETE_ALIASES \
  LIST_ROWS_FIRST BRACE_CCL NO_CASE_GLOB EXTENDED_GLOB GLOB_ASSIGN \
  GLOB_STAR_SHORT HIST_SUBST_PATTERN MAGIC_EQUAL_SUBST MARK_DIRS \
  NO_NOMATCH NUMERIC_GLOB_SORT RC_EXPAND_PARAM REMATCH_PCRE SHARE_HISTORY \
  HIST_EXPIRE_DUPS_FIRST HIST_FCNTL_LOCK HIST_FIND_NO_DUPS \
  HIST_IGNORE_ALL_DUPS HIST_IGNORE_DUPS HIST_IGNORE_SPACE HIST_LEX_WORDS \
  HIST_REDUCE_BLANKS HIST_SAVE_NO_DUPS HIST_VERIFY CORRECT \
  NO_FLOW_CONTROL INTERACTIVE_COMMENTS MAIL_WARNING RC_QUOTES AUTO_CONTINUE \
  NO_HUP LONG_LIST_JOBS PROMPT_BANG PROMPT_SUBST TRANSIENT_RPROMPT \
  COMBINING_CHARS EXTENDED_HISTORY
# }}}

# Completion Styles from zprezto {{{
# Use caching to make completion for commands such as dpkg and apt usable.
zstyle ':completion::complete:*' use-cache on
zstyle ':completion::complete:*' cache-path "$HOME/.dotfiles/tmp/.zcompcache"

# Case-insensitive (all), partial-word, and then substring completion.
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'

# Group matches and describe.
zstyle ':completion:*:*:*:*:*' menu select
zstyle ':completion:*:matches' group 'yes'
zstyle ':completion:*:options' description 'yes'
zstyle ':completion:*:options' auto-description '%d'
zstyle ':completion:*:corrections' format ' %F{green}-- %d (errors: %e) --%f'
zstyle ':completion:*:descriptions' format ' %F{yellow}-- %d --%f'
zstyle ':completion:*:messages' format ' %F{purple} -- %d --%f'
zstyle ':completion:*:warnings' format ' %F{red}-- no matches found --%f'
zstyle ':completion:*:default' list-prompt '%S%M matches%s'
zstyle ':completion:*' format ' %F{yellow}-- %d --%f'
zstyle ':completion:*' group-name ''
zstyle ':completion:*' verbose yes

# Fuzzy match mistyped completions.
zstyle ':completion:*' completer _complete _match _approximate
zstyle ':completion:*:match:*' original only
zstyle ':completion:*:approximate:*' max-errors 1 numeric

# Increase the number of errors based on the length of the typed word. But make
# sure to cap (at 7) the max-errors to avoid hanging.
zstyle -e ':completion:*:approximate:*' max-errors 'reply=($((($#PREFIX+$#SUFFIX)/3>7?7:($#PREFIX+$#SUFFIX)/3))numeric)'

# Don't complete unavailable commands.
zstyle ':completion:*:functions' ignored-patterns '(_*|pre(cmd|exec))'

# Array completion element sorting.
zstyle ':completion:*:*:-subscript-:*' tag-order indexes parameters

# Directories
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*:*:cd:*' tag-order local-directories directory-stack path-directories
zstyle ':completion:*:*:cd:*:directory-stack' menu yes select
zstyle ':completion:*:-tilde-:*' group-order 'path-directories' 'named-directories' 'users' 'expand'
zstyle ':completion:*' squeeze-slashes true
zstyle ':completion:*' add-space true

# History
zstyle ':completion:*:history-words' stop yes
zstyle ':completion:*:history-words' remove-all-dups yes
zstyle ':completion:*:history-words' list false
zstyle ':completion:*:history-words' menu yes

# Environmental Variables
zstyle ':completion::*:(-command-|export):*' fake-parameters ${${${_comps[(I)-value-*]#*,}%%,*}:#-*-}

# Populate hostname completion. But allow ignoring custom entries from static
# */etc/hosts* which might be uninteresting.
#zstyle -a ':prezto:module:completion:*:hosts' etc-host-ignores '_etc_host_ignores'

zstyle -e ':completion:*:hosts' hosts 'reply=(
  ${=${=${=${${(f)"$(cat {/etc/ssh_,~/.ssh/known_}hosts(|2)(N) 2> /dev/null)"}%%[#| ]*}//\]:[0-9]*/ }//,/ }//\[/ }
  ${=${${${${(@M)${(f)"$(cat ~/.ssh/config 2> /dev/null)"}:#Host *}#Host }:#*\**}:#*\?*}}
)'
# ${=${(f)"$(cat /etc/hosts(|)(N) <<(ypcat hosts 2> /dev/null))"}%%(\#${_etc_host_ignores:+|${(j:|:)~_etc_host_ignores}})*}

# Don't complete uninteresting users...
zstyle ':completion:*:*:*:users' ignored-patterns \
  backup colord geoclue gnats gnome-initial-setup \
  hplip irc kernoops list man messagebus nvidia-persistenced proxy \
  rtkit saned speech-dispatcher sys syslog systemd* \
  uuidd usbmux whoopsie www-data \
  adm amanda apache avahi* beaglidx bin cacti canna clamav daemon \
  dbus distcache dovecot fax ftp games gdm gkrellmd gopher \
  hacluster haldaemon halt hsqldb ident junkbust ldap lp mail \
  mailman mailnull mldonkey mysql nagios \
  named netdump news nfsnobody nobody nscd ntp nut nx openvpn \
  operator pcap postfix postgres privoxy pulse pvm quagga radvd \
  rpc rpcuser rpm shutdown squid sshd sync uucp vcsa xfs '_*'

# ... unless we really want to.
zstyle '*' single-ignored show

# Ignore multiple entries.
zstyle ':completion:*:(rm|kill|diff):*' ignore-line other
zstyle ':completion:*:rm:*' file-patterns '*:all-files'

# Kill
zstyle ':completion:*:*:*:*:processes' command 'ps -u $LOGNAME -o pid,user,command -w'
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#) ([0-9a-z-]#)*=01;36=0=01'
zstyle ':completion:*:*:kill:*' menu yes select
zstyle ':completion:*:*:kill:*' force-list always
zstyle ':completion:*:*:kill:*' insert-ids single

# Man
zstyle ':completion:*:manuals' separate-sections true
zstyle ':completion:*:manuals.(^1*)' insert-sections true

# Media Players
zstyle ':completion:*:*:mpg123:*' file-patterns '*.(mp3|MP3):mp3\ files *(-/):directories'
zstyle ':completion:*:*:mpg321:*' file-patterns '*.(mp3|MP3):mp3\ files *(-/):directories'
zstyle ':completion:*:*:ogg123:*' file-patterns '*.(ogg|OGG|flac):ogg\ files *(-/):directories'
zstyle ':completion:*:*:mocp:*' file-patterns '*.(wav|WAV|mp3|MP3|ogg|OGG|flac):ogg\ files *(-/):directories'

# Mutt
if [[ -s "$HOME/.mutt/aliases" ]]; then
  zstyle ':completion:*:*:mutt:*' menu yes select
  zstyle ':completion:*:mutt:*' users ${${${(f)"$(<"$HOME/.mutt/aliases")"}#alias[[:space:]]}%%[[:space:]]*}
fi

# SSH/SCP/RSYNC
zstyle ':completion:*:(ssh|scp|rsync):*' tag-order 'hosts:-host:host hosts:-domain:domain hosts:-ipaddr:ip\ address *'
zstyle ':completion:*:(scp|rsync):*' group-order users files all-files hosts-domain hosts-host hosts-ipaddr
zstyle ':completion:*:ssh:*' group-order users hosts-domain hosts-host users hosts-ipaddr
zstyle ':completion:*:(ssh|scp|rsync):*:hosts-host' ignored-patterns '*(.|:)*' loopback ip6-loopback localhost ip6-localhost broadcasthost
zstyle ':completion:*:(ssh|scp|rsync):*:hosts-domain' ignored-patterns '<->.<->.<->.<->' '^[-[:alnum:]]##(.[-[:alnum:]]##)##' '*@*'
zstyle ':completion:*:(ssh|scp|rsync):*:hosts-ipaddr' ignored-patterns '^(<->.<->.<->.<->|(|::)([[:xdigit:].]##:(#c,2))##(|%*))' '127.0.0.<->' '255.255.255.255' '::1' 'fe80::*'

# }}}

# ZLE settings {{{
bindkey -v

# show ... while completing {{{
function expand-or-complete-with-indicator {
  zle split-undo
  local indicator="..."
  print -Pn "$indicator"
  zle expand-or-complete
  zle redisplay
}
zle -N expand-or-complete-with-indicator
bindkey -M viins "\C-I" expand-or-complete-with-indicator
# }}}

# prepend sudo {{{
function prepend-sudo {
  if [[ "$BUFFER" != su(do|)\ * ]]; then
    if [[ "$BUFFER" == "v "* ]]; then
      BUFFER="sudoedit ${BUFFER#v }"
      (( CURSOR += 8 ))
    else
      BUFFER="sudo $BUFFER"
      (( CURSOR += 5 ))
    fi
  fi
}
zle -N prepend-sudo
bindkey -M viins "\C-s" prepend-sudo
#}}}

# dotdotdot {{{
function expand-dot-to-parent-directory-path {
  if [[ $ZLE_STATE == *insert* ]]; then
    if [[ $LBUFFER = *.. ]]; then
      LBUFFER+='/..'
    else
      LBUFFER+='.'
    fi
  else
    LBUFFER+='.'
    RBUFFER=${RBUFFER:1}
  fi
}
zle -N expand-dot-to-parent-directory-path
bindkey -M viins  "." expand-dot-to-parent-directory-path
bindkey -M isearch . self-insert 2>/dev/null # necessary? don't expand during incsearch
# }}}

# copy the earlier word {{{
autoload -Uz copy-earlier-word
zle -N copy-earlier-word
bindkey -M viins "\em" copy-earlier-word
#}}}

# edit command in vi {{{
autoload -Uz edit-command-line
zle -N edit-command-line
bindkey -M vicmd "\ee" edit-command-line
bindkey -M viins "\ee" edit-command-line
# }}}

# magic space with undo {{{
function magic-space-with-undo {
  zle split-undo
  zle magic-space
}
zle -N magic-space-with-undo
bindkey -M viins " " magic-space-with-undo
# }}}

autoload -Uz url-quote-magic
zle -N self-insert url-quote-magic

# cancel the esc in command mode
# and fix zle reset-prompt multiline-deletion bug for a few things
# it is not a complete fix tho, surround commands still delete the
# line above.
zsh-widget-noop () {}
zle -N zsh-widget-noop
bindkey -M vicmd '\e' zsh-widget-noop
bindkey -M viins '\eA' zsh-widget-noop
bindkey -M viins '\ea' zsh-widget-noop
bindkey -M viins '\eI' zsh-widget-noop
bindkey -M viins '\ei' zsh-widget-noop
bindkey -M viins '\eO' zsh-widget-noop
bindkey -M viins '\eo' zsh-widget-noop

zmodload zsh/terminfo

for mode in viins vicmd; do
  bindkey -M $mode "$terminfo[khome]" beginning-of-line
  bindkey -M $mode "$terminfo[kend]"  end-of-line
  bindkey -M $mode "\e[H"             beginning-of-line
  bindkey -M $mode "\e[F"             end-of-line
  bindkey -M $mode "$terminfo[kcuu1]" history-beginning-search-backward
  bindkey -M $mode "$terminfo[kcud1]" history-beginning-search-forward
  bindkey -M $mode "\e[A"             history-beginning-search-backward
  bindkey -M $mode "\e[B"             history-beginning-search-forward
  bindkey -M $mode "$terminfo[kcbt]"  reverse-menu-complete
  bindkey -M $mode "$terminfo[kdch1]" delete-char
  bindkey -M $mode "$terminfo[kbs]"   backward-delete-char
  bindkey -M $mode "\C-?"   backward-delete-char
  bindkey -M $mode "\C-q"             push-input
  bindkey -M $mode "\eq"              get-line
done

bindkey -M viins "\e[1;5D" backward-word       #  ctrl left
bindkey -M viins "\e[1;5C" forward-word        #  ctrl right
bindkey -M viins "\e[3;6~" kill-word           #  ctrl shift del
bindkey -M viins "\e[3;5~" backward-kill-word  #  ctrl del
bindkey -M viins "\e[3;3~" backward-kill-line  #  alt  del
bindkey -M viins "\C-z" undo

# add surround-operation to zle {{{
autoload -Uz surround
zle -N surround
zle -N delete-surround surround
zle -N add-surround surround
zle -N change-surround surround
bindkey -a cs change-surround
bindkey -a ds delete-surround
bindkey -a ys add-surround
bindkey -M visual S add-surround
# }}}

# bracket/quote text objects {{{
autoload -U select-bracketed select-quoted
zle -N select-bracketed
zle -N select-quoted
  for km in viopp visual; do
  bindkey -M $km -- '-' vi-up-line-or-history
  for c in {a,i}"${(s..):-\'\"\`\|,./:;-=+@}"; do
    bindkey -M $km $c select-quoted
  done
  for c in {a,i}${(s..):-'()[]{}<>bB'}; do
    bindkey -M $km $c select-bracketed
  done
done
#}}}

# clipboard integration {{{
[[ -n $DISPLAY ]] && (( $+commands[xclip] )) && {
function cutbuffer() {
  zle .$WIDGET
  echo $CUTBUFFER | xclip -selection clipboard
}

zle_cut_widgets=( vi-backward-delete-char vi-change vi-change-eol
vi-change-whole-line vi-delete vi-delete-char vi-kill-eol vi-substitute
vi-yank vi-yank-eol kill-word backward-kill-word vi-backward-kill-word
vi-kill-line )

for widget in $zle_cut_widgets; do
  zle -N $widget cutbuffer
done

function putbuffer() {
  zle copy-region-as-kill "$(xclip -selection clipboard -o)"
  zle .$WIDGET
}

zle_put_widgets=( vi-put-after vi-put-before )
for widget in $zle_put_widgets; do
  zle -N $widget putbuffer
done
}
# }}}

function _mode_indicator {
  if [[ $KEYMAP == "main" || $KEYMAP == "viins" ]]; then
    if [[ $ZLE_STATE == *insert* ]]; then
      PROMPT_COLOR=$'%{\e[38;2;255;100;0m%}'
    else
      PROMPT_COLOR=$'%{\e[38;2;100;255;0m%}'
    fi
  else
    PROMPT_COLOR=$'%{\e[38;2;100;0;255m%}'
  fi
  zle reset-prompt
}

function zle-line-init {
  if [[ -n $ZLE_LINE_ABORTED ]]; then
    local savebuf="$BUFFER" savecur="$CURSOR"
    BUFFER="$ZLE_LINE_ABORTED"
    CURSOR="$#BUFFER"
    zle split-undo
    BUFFER="$savebuf" CURSOR="$savecur"
  fi
  _mode_indicator
}
zle -N zle-line-init

function zle-keymap-select {
  _mode_indicator $@
}
zle -N zle-keymap-select

# #}}}

# theme {{{
PS1=$'%{\e[38;2;114;178;51m%}%d%f
$PROMPT_COLOR❯%b%f '
if [[ -n $SSH_CONNECTION ]]; then
  PS1=$'%B%{\e[38;2;255;0;0m%}%(!.%# .)%f%{\e[38;2;114;178;51m%}%n@%M%f | '$PS1
else
  PS1=$'%B%{\e[38;2;255;0;0m%}%(!.%# .)%f%{\e[38;2;114;178;51m%}%n%f | '$PS1
fi
RPS1=$'%B%(0?..%{\e[38;2;255;0;0m%}%?%f)%(1j.%{\e[38;2;255;100;0m%} %j bg jobs%f.)%b'
tabs -2
# }}}

# syntax highlighting {{{
source $ZDOTDIR/syntax-highlight/fast-syntax-highlighting.plugin.zsh
FAST_HIGHLIGHT_STYLES[function]='fg=green,bold'
FAST_HIGHLIGHT_STYLES[alias]='fg=green,bold'
# }}}

HISTFILE="$HOME/.dotfiles/tmp/history"
HISTSIZE=12000
SAVEHIST=10000

path=($HOME/bin $HOME/.cargo/bin /opt/conda/bin $path)

fpath=($ZDOTDIR/autoload $ZDOTDIR/zsh-completions/src $fpath)
for i ($ZDOTDIR/autoload/^_*(:t)) autoload -U $i

source $ZDOTDIR/aliases

source "$ZDOTDIR/sshfs-manager/setup.zsh"

SAVEDDIRS="$HOME/.dotfiles/tmp/dirs"
source "$ZDOTDIR/savedir/setup.zsh"

KEYTIMEOUT=10
PROMPT_EOL_MARK=' [no EOL]'

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh


# load some 'features' {{{
autoload -U zmv
zmodload zsh/pcre
source /etc/zsh_command_not_found
disable r # do not use shell built-in r for repeating last command
autoload -Uz compinit  && compinit -i -d ~/.dotfiles/tmp/zcompdump
# compile zcompdump
{
  zcomp="$HOME/.dotfiles/tmp/zcompdump" 
  if [[ -s "$zcomp" && (! -s "${zcomp}.zwc" || "${zcomp}" -nt "${zcomp}.zwc") ]]; then 
    zcompile "$zcomp"
  fi
} &!

#}}}
