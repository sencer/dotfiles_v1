# vi: ft=tcl

# display presets
proc set_preset { preset {molid top} } {
  delete_reps $molid
  show_$preset $molid
  return 0
}

proc show_dynamic { molid } {

  mol color Element
  mol selection all

  mol representation VDW 0.3 18.0
  mol addrep $molid

  mol representation DynamicBonds 2.3 0.1 16.0
  mol selection noh and within 2.3 of name Ti Fe Co Ni Al Zn
  mol addrep $molid

  mol representation DynamicBonds 1.7 0.1 16.0
  mol selection noh
  mol addrep $molid

  mol representation DynamicBonds 1.2 0.1 16.0
  mol selection all
  mol addrep $molid

  if { [molinfo $molid get filetype] == "cube" } {
    mol material Diffuse

    mol representation Isosurface  0.005 0 0 0 1 1
    mol color ColorID 10
    mol addrep $molid

    mol representation Isosurface -0.005 0 0 0 1 1
    mol color ColorID 9
    mol addrep $molid

    mol material Opaque
  }
}

proc show_cpk { molid } {

  mol color Element
  mol selection all

  mol representation CPK 1.2 0.6 12.0 12.0
  mol addrep $molid

  if { [molinfo $molid get filetype] == "cube" } {
    mol material Diffuse

    mol representation Isosurface  0.005 0 0 0 1 1
    mol color ColorID 10
    mol addrep $molid

    mol representation Isosurface -0.005 0 0 0 1 1
    mol color ColorID 9
    mol addrep $molid

    mol material Opaque
  }
}

proc show_sensors { molid } {

  mol representation VDW 0.3 18.0
  mol color Element
  mol selection not name He
  mol material Opaque
  mol addrep $molid

  mol representation VDW 0.100000 18.000000
  mol color ColorID 7
  mol selection name He
  mol material Diffuse
  mol addrep $molid

}

# utility functions
proc reload { {molid top} } {

  global dont_source_view_vmd
  set dont_source_view_vmd 1

  if {$molid == "top"} {
    set molid [molinfo top]
  }

  set file [molinfo $molid get filename]

  global representations
  global viewpoints

  save_viewpoint
  save_reps

  mol delete $molid
  set newmol [mol new $file]

  set representations($newmol) $representations($molid)
  set viewpoints($newmol) $viewpoints($molid)
  unset representations($molid)
  unset viewpoints($molid)

  restore_viewpoint
  restore_reps

  return 0
}

proc center_sel { {sel all} } {
  global shift

  if { $sel == "all" } {
    set molid [molinfo top]
    set sel [atomselect top all]
    set all $sel
  } else {
    set molid [$sel molid]
    set all [atomselect $molid all]
  }

  set r [vecsub [vecadd "$shift($molid,0) $shift($molid,1) $shift($molid,2)"\
    [vecscale 0.5 [vecadd {*}[lindex [pbc get -namd] 0]]]] \
    [measure center $sel] \
    ]

  $all moveby $r
  return 0
}

proc generate_filename { basename extension } {
# generate a basename.i.ext such that it doesn't already exist

  # if basename is {} as in the topotool generated new molecule
  if { $basename eq "{}" } {
    set basename vmd
  }

  set tmp "$basename.$extension"

  set i 1
  while { [ file exists "$tmp" ] } {
    set tmp "$basename.$i.$extension"
    incr i
  }
  return $tmp
}

proc framedo {molid dowhat args} {
  set nf [molinfo $molid get numframes]
  for {set i 0} {$i<$nf} {incr i} {
    molinfo $molid set frame $i
    catch {
      $dowhat {*}$args
    }
  }
}

proc save_xyz { sel fname {all 0}} {
  global shift
  set molid [$sel molid]
  set fildes [open $fname w]

  if { $all } {
    set first 0
    set last [molinfo $molid get numframes]
    puts "Writing all frames. This might take some time."
  } else {
    set first [molinfo $molid get frame]
    set last [expr $first+1]
  }

  for {set fr $first} {$fr < $last} {incr fr} {
    molinfo $molid set frame $fr
    puts $fildes [$sel num]
    if { [molinfo $molid get a] > 0 } {
      puts $fildes "celldm [molinfo $molid get {a b c alpha beta gamma}]"
    } else {
      puts $fildes ""
    }

    foreach atom [$sel get {element x y z}] {
      puts $fildes [ \
        format "%-4s %14.10f %14.10f %14.10f" [lindex $atom 0] \
        [expr [lindex $atom 1] - $shift($molid,0)] \
        [expr [lindex $atom 2] - $shift($molid,1)] \
        [expr [lindex $atom 3] - $shift($molid,2)] \
        ]
    }
  }

  close $fildes
  puts "Written $fname"
  return 0
}

proc save_poscar { sel fname } {
  global shift
  set molid [$sel molid]

  if { [molinfo $molid get a] > 0 } {
    set inv [transtranspose [invert_3d {*}[pbc get -namd -molid $molid]]]
  } else {
    puts "No cell dimensions found. Exiting."
    return 1
  }

  set fildes [open $fname w]

  # header
  set count [lcount [lsort [$sel get element]]]
  puts $fildes "$count"
  puts $fildes 1.00

  # unit cell information
  set pbc {*}[pbc get -namd -molid $molid]
  foreach abc $pbc {
    puts $fildes [format "  %14.10f %14.10f %14.10f" {*}$abc]
  }

  set spec ""
  set cnt  ""
  foreach {s c} $count {
    set spec "$spec $s"
    set cnt "$cnt $c"
  }
  puts $fildes "$spec"
  puts $fildes "$cnt"

  puts $fildes "Direct"

  foreach atom [lsort -index 0 [$sel get {element x y z}]] {
    set atom [coordtrans $inv [lrange $atom 1 3]]

    puts $fildes [format "%14.10f %14.10f %14.10f"  \
      [expr [lindex $atom 0] - $shift($molid,0)] \
      [expr [lindex $atom 1] - $shift($molid,1)] \
      [expr [lindex $atom 2] - $shift($molid,2)] \
    ]
  }

  close $fildes
  puts "Written $fname"
  return 0
}

proc set_cell_from_vecs { dm ldm {all 0} } {
  # remove parens, and overwrite dm
  regsub -all {\(|\)} $dm "" dm
  set a [lrange $dm 1 3]
  set b [lrange $dm 4 6]
  set c [lrange $dm 7 10]

  if { $ldm < 10 } {
    set c "0 0 100"
  }
  if { $ldm < 6 } {
    set b "0 100 0"
  }

  if { $all } {
    pbc set "{$a} {$b} {$c}" -namd -all -alignx
  } else {
    pbc set "{$a} {$b} {$c}" -namd -alignx
  }
}

proc set_xyz_cell { molid {var 0} } {

  set fname [molinfo $molid get filename]
  if { ![file readable $fname] } {
  # if file is not readable inform and die
    puts "File $fname not readable."
    return 1
  }

  set fil [open $fname r]
  set nat [gets $fil]

  # read the comment line
  set dm [gets $fil]
  set ldm [llength $dm]
  if { [lindex $dm 0] == "celldm" && ($ldm == 4 || $ldm == 7) } {
    pbc set "[lrange $dm 1 end]" -molid $molid -all
  } elseif { [lindex $dm 0] ==  "TV:" && [llength $dm] > 1 } {
    set_cell_from_vecs $dm $ldm 1
  } else {
    puts "File doesn't contain pbc information, at least for the first frame"
  }

  # flag to keep if all frames are OK
  set flag 0
  if { $var } {
  # cell dimension is variable, read all frames
    puts "Reading pbc information for all frames. This might take some time"

    set nf [molinfo $molid get numframes]
    set curframe [molinfo $molid get frame]

    for {set frame 1} {$frame < $nf} {incr frame} {

      for {set i 0} {$i < $nat} {incr i} {
        if { [gets $fil line] == -1 } {
          puts "Unexpected EOF."
          molinfo $molid set frame $curframe
          return 1
        }
      }

      set nat [gets $fil]
      set dm [gets $fil]
      set ldm [llength $dm]
      molinfo $molid set frame $frame
      if { [lindex $dm 0] == "celldm" && ($ldm == 4 || $ldm == 7) } {
        if { $ldm == 4 } {
          set dm "$dm 90 90 90"
        }
        molinfo $molid set { a b c alpha beta gamma } [lrange $dm 1 end]
      } elseif { [lindex $dm 0] ==  "TV:" && [llength $dm] > 1 } {
        set_cell_from_vecs $dm $ldm
      } else {
        set flag 1
      }
    }
    molinfo $molid set frame $curframe
  }
  close $fil
  return $flag
}

proc search_saved_reps {} {
  global env
  set dir [pwd]

  while { ![file exists $dir/view.vmd] } {
    set dir [file normalize $dir/..]
    if { $dir == [file normalize $env(HOME)/..] } {
      return "view.vmd"
    }
  }
  return "$dir/view.vmd"
}

proc save_reps {{pbc 0}} {

  global shift

  set fname [search_saved_reps]
  set fildes [open $fname w]

  set nummols [llength [molinfo list]]
  set prefix " "
  set cond " if"

  puts $fildes "display resize [display get size]"
  puts $fildes ""

  if { [llength [array get shift]] > 0 } {
    puts $fildes "global shift"
    puts $fildes "array set shift {[array get shift]}"
    puts $fildes ""
  }

  puts $fildes "proc load_saved_reps {molid} {"
  puts $fildes ""
  foreach mol [molinfo list] {
    if { $nummols > 1 } {
    # if there is only one molecule, save the reps without requiring that
    # the loading molecule has to be first molecule
      puts $fildes " $cond { \$molid == $mol } \{"
      set prefix "   "
      set cond "elseif"
    }
    # first delete the representations of the molecule
    puts $fildes "$prefix delete_reps \$molid"
    puts $fildes ""

    # put each representation, if they are periodic and if they are on
    set nrep [molinfo $mol get numreps]
    for {set i 0} {$i < $nrep} {incr i} {
      puts $fildes "$prefix mol representation [join [molinfo $mol get "{rep $i}"]]"
      puts $fildes "$prefix mol color [join [molinfo $mol get "{color $i}"]]"
      puts $fildes "$prefix mol selection [join [molinfo $mol get "{selection $i}"]]"
      puts $fildes "$prefix mol material [join [molinfo $mol get "{material $i}"]]"
      puts $fildes "$prefix mol addrep \$molid"

      set sp [mol showperiodic $mol $i]
      if {[string length $sp]} {
        puts $fildes "$prefix mol showperiodic \$molid $i $sp"
        puts $fildes "$prefix mol numperiodic \$molid $i [mol numperiodic $mol $i]"
      }

      if {[mol colupdate $i $mol]} {
        puts $fildes "$prefix mol colupdate \$molid $i 1"
      }

      if {[mol selupdate $i $mol]} {
        puts $fildes "$prefix mol selupdate \$molid $i 1"
      }

      if { ![mol showrep $mol $i] } {
        puts $fildes "$prefix mol showrep \$molid $i 0"
      }
      puts $fildes ""
    }

    # put display matrices
    puts $fildes "$prefix molinfo \$molid set center_matrix {[molinfo $mol get center_matrix]}"
    puts $fildes "$prefix molinfo \$molid set rotate_matrix {[molinfo $mol get rotate_matrix]}"
    puts $fildes "$prefix molinfo \$molid set scale_matrix {[molinfo $mol get scale_matrix]}"
    puts $fildes "$prefix molinfo \$molid set global_matrix {[molinfo $mol get global_matrix]}"
    if { $pbc && [molinfo $mol get a] > 0 } {
      puts $fildes "$prefix pbc set [pbc get -now -molid $mol] -molid \$molid -all"
    }

    if { $nummols > 1 } {
    # if there are more than one molecules, save the drawn/active props as well
      if {![molinfo $mol get drawn]} {
        puts $fildes "    molinfo \$molid set drawn 0"
      }

      if {![molinfo $mol get active]} {
        puts $fildes "    molinfo \$molid set active 0"
      }

      if {[molinfo $mol get fixed]} {
        puts $fildes "    molinfo \$molid set fixed 1"
      }
      puts $fildes "$prefix return 0"
      puts -nonewline $fildes "  \}"
    }
  }

  puts $fildes ""
  if { $nummols > 1 } {
    puts $fildes "  return 1"
  } else {
    puts $fildes "  return 0"
  }
  puts $fildes "}"
  close $fildes
  puts "Written to $fname"
  return 0
}

proc delete_reps { molid } {

  set nrep [molinfo $molid get numreps]

  for {set i 0} {$i < $nrep} {incr i} {
    mol delrep 0 $molid
  }

  return 0
}

proc shift_axis { axis dir } {
# change the origin of unit cell, and wrap the atoms properly
# works on "top" molecule, change the top as necessary in ui

  global shift

  set topmol [molinfo top]

  if { ! [info exists shift($topmol,0)] } {
    set shift($topmol,0) 0
    set shift($topmol,1) 0
    set shift($topmol,2) 0
  }

  set shift($topmol,$axis) [expr $shift($topmol,$axis) + $dir*0.1]

  pbc wrap -shiftcenter "$shift($topmol,0) $shift($topmol,1) $shift($topmol,2)"
  pbc box  -shiftcenter "$shift($topmol,0) $shift($topmol,1) $shift($topmol,2)"

  return 0
}

proc shift_cell { x y z } {
  shift_axis 0 [expr $x*10]
  shift_axis 1 [expr $y*10]
  shift_axis 2 [expr $z*10]
  return 0
}

proc unwrap {{molid top}} {

  # wrap to avoid double unwrapping
  pbc wrap -molid $molid -now

  # save current frame to a file
  set tmp [exec mktemp --suffix .xyz]
  set all_current_frame [atomselect $molid all]
  save_xyz $all_current_frame $tmp

  # use an external program to decide unwrapping
  set source_file [exec vmd_unwrap $tmp]
  source $source_file

  # update the bonding information
  mol bondsrecalc $molid
  mol reanalyze $molid

  # remove the files
  file delete -force $tmp $source_file

  # free memory & return
  $all_current_frame delete
  return 0
}

proc numfrags {{molid top}} {
  set sel [atomselect $molid all]
  set nfrag [lindex [lsort -integer -uniq [$sel get fragment]] end]
  $sel delete
  return [expr $nfrag+1]
}

proc solid_state_radii { {molid top} } {
  set sel [atomselect $molid all]
  $sel set radius [vecscale 1.2 [$sel get radius]]
  mol bondsrecalc $molid
  mol reanalyze $molid
  $sel delete
}

proc load_extra_data { {molid top} } {

  set file [molinfo $molid get filename]

  if { [file extension $file] != ".xyz" } {
    puts "Implemented for xyz files only."
    return 1
  }
  set f [open $file]
  set nf [molinfo $molid get numframes]
  set all [atomselect top all]

  for {set i 0} {$i<$nf} {incr i} {
    if { [gets $f nat] == -1 } {
      puts "Frame $i not found, exiting."
      return 1
    }
    if { [gets $f line] == -1 } {
      puts "Incomplete frame $i, exiting."
      return 1
    }
    set data ""
    set data1 ""
    set data2 ""
    for {set j 0} {$j<$nat} {incr j} {
      if { [gets $f line] == -1 } {
        puts "Incomplete frame $i, exiting at atom $j."
        return 1
      }
      set ll [llength $line]
      if { $ll < 5 } { 
        puts "Atom $j in frame $i does not contain data, exiting."
        return 1
      } else {
        set data "$data [lindex $line 4]"
        if { $ll > 5 } {
          set data1 "$data1 [lindex $line 5]"
        }
        if { $ll > 6 } {
          set data2 "$data2 [lindex $line 6]"
        }
      }
    }
    molinfo $molid set frame $i
    $all set user $data
    if { $ll > 5 } {
      $all set user2 $data1
    }
    if { $ll > 6 } {
      $all set user3 $data2
    }
  }
  $all delete
  return 0
}

proc invert_3d { matrix } {
  if { [llength $matrix] == 3 } {
    lassign $matrix a b c
    lappend a 0
    lappend b 0
    lappend c 0
    set matrix "{$a} {$b} {$c} {0 0 0 1}"
  }
  return [measure inverse $matrix]
}

proc n_color_scale { n } {

  if { $n>6 } {
    puts ">6 not implemented yet."
    return 1
  } elseif { $n < 2 } {
    puts "n should be at least 2"
    return 1
  }

  global colors

  if { ![info exists colors] } {
    # rgb(227,26,28)
    # rgb(31,120,181)
    # rgb(51,161,43)
    # rgb(255,255,153)
    # rgb(107,61,153)
    # rgb(255,128,0)
    set colors {
      {0.89 0.10 0.11}
      {0.12 0.47 0.71}
      {0.20 0.63 0.17}
      {1.00 1.00 0.60}
      {0.42 0.24 0.60}
      {1.00 0.50 0.00}
    }
  }

  set shift [colorinfo num]
  display update off
  set j [expr 1024/($n-1)]

  for {set seg 0} {$seg < [expr $n-1] } { incr seg } {
    for {set i 0} {$i < $j } { incr i} {
    # interpolate the colors
      set scale [expr ($i*1.0/$j)]
      color change rgb [expr $seg*$j+$i+$shift] {*}[vecadd \
        [vecscale [expr 1-$scale] [lindex $colors $seg]] \
        [vecscale $scale          [lindex $colors [expr 1+$seg]]]
      ]
    }
  }

  set m [expr 1024-$j*($n-1)]
  for {set i 0} {$i < $m } { incr i} {
    color change rgb [expr $seg*$j+$i+$shift] {*}[lindex $colors $seg]
  }

  display update on
}

 proc lcount list {
    set count {}
    foreach element $list {dict incr count $element}
    set count
 }

# do initialization

menu main on
proc initialize_vmd {} {
# initialize in a proc, so it doesn't clutter VMD console

  display projection orthographic
  display nearclip set 0
  display depthcue off

  axes location off
  color Display Background white

  user add key q { exit }
  user add key f { save_xyz [atomselect top all] [generate_filename \
                   [file tail [file rootname [molinfo top get filename]]] xyz] }

  user add key F { save_xyz [atomselect top all] [generate_filename \
                   [file tail [file rootname [molinfo top get filename]]] xyz] 1}

  user add key P { render POV3 [generate_filename \
                   [file tail [file rootname [molinfo top get filename]]] pov] }
  render options POV3 { povray +W%w +H%h -I%s -O%s.png -D -X +A +UA +FN }

  user add key a { save_reps }
  user add key A { save_reps 1 }

  user add key R { reload }

  user add key C { center_sel }

  user add key F1 { load_saved_reps top }
  user add key F2 { set_preset dynamic }
  user add key F3 { set_preset cpk }
  user add key F4 { set_preset sensors }

  # manage pbc tools

  user add key W { 
    set t [molinfo top]
    pbc wrap -all -shiftcenter "$shift($t,0) $shift($t,1) $shift($t,2)"
  }

  user add key w {
    set t [molinfo top]
    pbc wrap -shiftcenter "$shift($t,0) $shift($t,1) $shift($t,2)"
  }

  user add key u { unwrap top }

  user add key o { pbc box -toggle }

  user add key Right { shift_axis 0  1 }
  user add key Left  { shift_axis 0 -1 }
  user add key End   { shift_axis 1  1 }
  user add key Home  { shift_axis 1 -1 }
  user add key Up    { shift_axis 2  1 }
  user add key Down  { shift_axis 2 -1 }

  # color definitions
  color change rgb 33 0.3 0.3 0.3
  catch { color Element C 33 }
  catch { color Name O pink }
  catch { color Name Ti white }
  catch { color Element Ti silver }
  catch { color Element Zn gray }
  catch { color Element Ni silver }
  catch { color Element Co silver }
  catch { color Element Al gray }
  catch { color Element Nb green }
  catch { color Element Na green }

  color Labels Bonds black
  color Labels Angles blue

  animate style Rock

  # check if there is a view.vmd file in the directory tree, and load if exists
  set repsfile [search_saved_reps]
  if { [file readable $repsfile] } {
    source $repsfile
  }

}

proc init_mol_proxy {dummy molid dummy2} {
  global vmd_initialize_structure
  eval "after idle {if {$vmd_initialize_structure($molid)} {initialize_molecule $molid}}"
}

proc initialize_molecule {molid} {

  global dont_source_view_vmd

  if { ![info exists dont_source_view_vmd] && (
       [info command load_saved_reps] == "" ||
       [load_saved_reps $molid]) } {
       # if view.vmd is not sourced, or if the sourced file does not apply
       # to the current molecule set dynamic preset.
    set_preset dynamic $molid 
  }

  global shift
  if { ! [info exists shift($molid,0)] } {
    set shift($molid,0) 0
    set shift($molid,1) 0
    set shift($molid,2) 0
  }

  if { [molinfo $molid get filetype] == "xyz" && ![molinfo $molid get a] } {
  # if this is an xyz file and doesn't have pbc set already try
  # checking the comment strings
    set_xyz_cell $molid
  }
}

after idle {
  initialize_vmd

  foreach molid [molinfo list] {
    initialize_molecule $molid
  }

  trace variable vmd_initialize_structure w init_mol_proxy

  global env auto_path
  lappend auto_path "$env(HOME)/.dotfiles/vmd"
  VisualSelect::Initialize
}
